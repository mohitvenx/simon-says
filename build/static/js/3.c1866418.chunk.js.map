{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Menu/Menu.styles.ts","components/Menu/CustomSelect.tsx","components/Menu/Menu.tsx","helpers/randomArray.ts"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","Button","styled","div","Container","StepsHeader","label","Select","select","CustomSelect","draft","onChange","count","map","x","Menu","totalRounds","useSelector","selectTotalRounds","useState","selectedStep","setSelectedStep","dispatch","useDispatch","onClick","step","max","start","randomArray","from","Math","floor","random","e","Number","target"],"mappings":"oJAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,G,26BIH/F,IAAMC,EAASC,IAAOC,IAAV,KAYNC,EAAYF,IAAOC,IAAV,KAQTE,EAAcH,IAAOI,MAAV,KASXC,EAASL,IAAOM,OAAV,K,OCPJC,EAfwB,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MACzD,OACE,eAACP,EAAD,oBAEE,cAACE,EAAD,CAAQX,MAAOc,EAAOC,SAAUA,EAAhC,SACG,YAAI9B,MAAM+B,IAAQC,KAAI,SAACC,EAAGlC,GAAJ,OACrB,wBAAgBgB,MAAOhB,EAAI,EAA3B,SACGA,EAAI,GADMA,YCcRmC,UArBQ,WACrB,IAAMC,EAAcC,YAAYC,KADL,IAEaC,mBAASH,GAFtB,GAEpBI,EAFoB,KAENC,EAFM,KAGrBC,EAAWC,cAUjB,OACE,eAACnB,EAAD,WACE,cAACH,EAAD,CAAQuB,QANS,WCjBI,IAACC,EAAcC,EDkBtCJ,EAASK,YAAM,CAAEX,YAAaI,EAAcQ,aClBpBH,EDkB6CL,EClB/BM,EDkB6C,GCjBrF7C,MAAMgD,KAAK,CAAEhC,OAAQ4B,IAAQ,kBAAMK,KAAKC,MAAMD,KAAKE,SAAWN,WDsB1D,mBACA,cAAC,EAAD,CAAcf,SAXG,SAACsB,GACpBZ,EAAgBa,OAAOD,EAAEE,OAAOvC,SAUQc,MAAOU,EAAcR,MAAO","file":"static/js/3.c1866418.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import styled from 'styled-components';\n\nexport const Button = styled.div`\n  width: 100%;\n  font-size: 11.2rem;\n  line-height: 10rem;\n  padding: 1rem;\n  border: 5px solid #ffffff;\n  border-radius: 5px;\n  background: transparent;\n  text-align: center;\n  cursor: pointer;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  max-width: 326px;\n`;\n\nexport const StepsHeader = styled.label`\n  font-size: 5.2rem;\n  line-height: 5.6rem;\n  font-weight: 700;\n  width: 100%;\n  text-align: center;\n  margin-top: 50px;\n`;\n\nexport const Select = styled.select`\n  display: block;\n  background: transparent;\n  border: 3px solid #ffffff;\n  width: 100%;\n  height: 50px;\n  color: #ffffff;\n  font-size: 4rem;\n  text-align: center;\n`;\n","import React from 'react';\nimport { StepsHeader, Select } from './Menu.styles';\n\ninterface IProps {\n  readonly draft: number;\n  readonly onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n  readonly count: number;\n}\n\nconst CustomSelect: React.FC<IProps> = ({ draft, onChange, count }) => {\n  return (\n    <StepsHeader>\n      Steps:\n      <Select value={draft} onChange={onChange}>\n        {[...Array(count)].map((x, i) => (\n          <option key={i} value={i + 1}>\n            {i + 1}\n          </option>\n        ))}\n      </Select>\n    </StepsHeader>\n  );\n};\n\nexport default CustomSelect;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { start } from 'slices/gameSlice';\nimport { selectTotalRounds } from 'slices/gameSlice';\nimport { Button, Container } from './Menu.styles';\nimport CustomSelect from './CustomSelect';\nimport { randomArray } from 'helpers/randomArray';\n\nconst Menu: React.FC = () => {\n  const totalRounds = useSelector(selectTotalRounds);\n  const [selectedStep, setSelectedStep] = useState(totalRounds);\n  const dispatch = useDispatch();\n\n  const handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedStep(Number(e.target.value));\n  };\n\n  const handleSumbit = () => {\n    dispatch(start({ totalRounds: selectedStep, randomArray: randomArray(selectedStep, 16) }));\n  };\n\n  return (\n    <Container>\n      <Button onClick={handleSumbit}>START</Button>\n      <CustomSelect onChange={handleChange} draft={selectedStep} count={10} />\n    </Container>\n  );\n};\n\nexport default Menu;\n","export const randomArray = (step: number, max: number) =>\n  Array.from({ length: step }, () => Math.floor(Math.random() * max));\n"],"sourceRoot":""}