{"version":3,"sources":["slices/gameSlice.ts","store.ts","components/Wrapper/Wrapper.styles.ts","images/logo.svg","components/Wrapper/Wrapper.tsx","components/GameBoard/ResetButton/ResetButton.styles.ts","components/GameBoard/ResetButton/ResetButton.tsx","components/GameBoard/GameBoard.styles.ts","components/GameBoard/Box/Box.styles.ts","components/GameBoard/ProgressBar/ProgressBar.styles.ts","components/GameBoard/ProgressBar/ProgressBar.tsx","hooks/useKeyboard.ts","helpers/compareArray.ts","components/GameBoard/Box/Keyboard.tsx","hooks/useAnimeScreen.ts","helpers/animeScreen.ts","components/GameBoard/Box/Screen.tsx","components/GameBoard/Box/Winner.tsx","hooks/useWin.ts","components/GameBoard/GameBoard.tsx","pages/Game.tsx","images/background.png","theme/GlobalStyle.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["gameSlice","createSlice","name","initialState","isLaunched","totalRounds","currentRound","lastSuccessRound","isUserTurn","randomArray","userArray","reducers","start","state","action","payload","reset","setTurn","userClick","push","success","fail","actions","selectIsUserTurn","game","selectIsLaunched","selectCurrentRound","selectTotalRounds","selectRandomArray","selectUserArray","store","configureStore","reducer","gameReducer","Container","styled","div","Logo","img","Header","h1","Wrapper","children","src","logo","Button","ResetButton","dispatch","useDispatch","onClick","BoxContainer","ScreenGrid","ScreenItem","KeyboardGrid","props","active","KeyboardItem","WinnerWrapper","WinnerHeader","p","ProgressGrid","ProgressItem","ProgressBar","useSelector","Array","map","x","i","useKeyboard","useEffect","userArr","randArr","isValid","every","item","index","length","handleClick","e","Keyboard","useAnimeScreen","screenRef","useRef","useLayoutEffect","current","currItem","delayTime","hideTime","delay","style","background","removeAttribute","Screen","ref","useWin","isWin","Gameboard","Winner","Menu","lazy","Game","fallback","GameBoard","GlobalStyle","createGlobalStyle","App","className","Boolean","window","location","hostname","match","WebFont","load","google","families","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.258c2a43.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { IState, IGameSliceState } from 'types';\n\nconst initialState: IGameSliceState = {\n  isLaunched: false,\n  totalRounds: 5,\n  currentRound: 1,\n  lastSuccessRound: 1,\n  isUserTurn: false,\n  randomArray: [],\n  userArray: [],\n};\n\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    start: (state, action) => {\n      state.isLaunched = true;\n      state.totalRounds = action.payload.totalRounds;\n      state.randomArray = action.payload.randomArray;\n    },\n    reset: (state) => {\n      state.isLaunched = false;\n      state.userArray = [];\n      state.currentRound = 1;\n      state.lastSuccessRound = 1;\n    },\n    setTurn(state, action) {\n      state.isUserTurn = action.payload;\n    },\n    userClick(state, action) {\n      state.userArray.push(action.payload);\n    },\n    success: (state) => {\n      state.lastSuccessRound = state.currentRound;\n      state.currentRound = state.currentRound + 1;\n      state.isUserTurn = false;\n      state.userArray = [];\n    },\n    fail: (state) => {\n      state.currentRound = state.lastSuccessRound;\n      state.isUserTurn = false;\n      state.userArray = [];\n    },\n  },\n});\n\nexport const { start, reset, setTurn, userClick, success, fail } = gameSlice.actions;\n\nexport const selectIsUserTurn = (state: IState<IGameSliceState>) => state.game.isUserTurn;\n\nexport const selectIsLaunched = (state: IState<IGameSliceState>) => state.game.isLaunched;\n\nexport const selectCurrentRound = (state: IState<IGameSliceState>) => state.game.currentRound;\nexport const selectTotalRounds = (state: IState<IGameSliceState>) => state.game.totalRounds;\n\nexport const selectRandomArray = (state: IState<IGameSliceState>) => state.game.randomArray;\nexport const selectUserArray = (state: IState<IGameSliceState>) => state.game.userArray;\n\nexport default gameSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport gameReducer from 'slices/gameSlice';\n\nconst store = configureStore({\n  reducer: {\n    game: gameReducer,\n  },\n});\n\nexport default store;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n`;\n\nexport const Logo = styled.img`\n  width: 338px;\n  height: 97px;\n`;\n\nexport const Header = styled.h1`\n  font-size: 7.2rem;\n  margin-top: 1rem;\n`;\n\nexport const FigureGreen = styled.img`\n  position: absolute;\n`;\n","export default __webpack_public_path__ + \"static/media/logo.fcde088b.svg\";","import React from 'react';\nimport { Container, Logo, Header } from './Wrapper.styles';\nimport logo from '../../images/logo.svg';\n\nconst Wrapper: React.FC = ({ children }) => {\n  return (\n    <Container>\n      <Logo src={logo} />\n      <Header>SIMON SAYS</Header>\n\n      {children}\n    </Container>\n  );\n};\n\nexport default Wrapper;\n","import styled from 'styled-components';\n\nexport const Button = styled.div`\n  font-size: 3.2rem;\n  font-weight: 700;\n  padding: 0.5rem 1rem;\n  border: 2.5px solid #ffffff;\n  border-radius: 5px;\n  background: transparent;\n  text-align: center;\n  cursor: pointer;\n  text-transform: uppercase;\n  max-width: 200px;\n  align-self: flex-end;\n`;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Button } from './ResetButton.styles';\nimport { reset } from 'slices/gameSlice';\n\nconst ResetButton: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const handleSumbit = () => {\n    dispatch(reset());\n  };\n\n  return <Button onClick={handleSumbit}>Reset</Button>;\n};\n\nexport default ResetButton;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  max-width: 1140px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  aligin-items: center;\n`;\n\nexport const Wrapper = styled(Container)`\n  flex-direction: row;\n  justify-content: space-around;\n  flex-wrap: wrap;\n`;\n","import styled from 'styled-components';\n\nexport const BoxContainer = styled.div`\n  max-width: 300px;\n  width: 100%;\n  background: #a4a3a3;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 5px;\n  box-shadow: 0px 0px 10px 14px rgba(0, 0, 0, 0.75);\n  margin-top: 30px;\n\n  height: 350px;\n`;\n\nexport const ScreenGrid = styled.div`\n  padding: 3px;\n  background: #000;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  grid-template-rows: 50px 50px;\n  gap: 3px 3px;\n  grid-template-areas:\n    '. . . . '\n    '. . . . '\n    '. . . . '\n    '. . . . ';\n`;\n\nexport const ScreenItem = styled.div<{ active: boolean | undefined }>`\n  background: #000;\n  width: 50px;\n  height: 50px;\n`;\n\nexport const KeyboardGrid = styled(ScreenGrid)<{ active: boolean | undefined }>`\n  pointer-events: ${(props) => (props.active ? 'auto' : 'none')};\n  background: transparent;\n  gap: 5px 5px;\n`;\n\nexport const KeyboardItem = styled.div`\n  background-image: radial-gradient(circle farthest-corner at 10% 20%, gray 0%, rgb(5, 5, 5) 82.8%);\n  border: 1px solid black;\n  box-shadow: 0px 0px 7px 1px rgba(0, 0, 0, 0.75);\n  cursor: pointer;\n  width: 50px;\n  height: 50px;\n`;\n\nexport const WinnerWrapper = styled.div`\n  background: #000;\n  border: 3px solid #ffffff;\n  padding: 5rem;\n  margin-top: 2rem;\n`;\n\nexport const WinnerHeader = styled.p`\n  font-size: 10rem;\n  font-weight: bold;\n`;\n","import styled from 'styled-components';\n\nexport const ProgressGrid = styled.div`\n  margin-top: 10px;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\n  grid-template-rows: 35px 50px;\n  gap: 5px 12px;\n  grid-template-areas:\n    '. . . . .'\n    '. . . . .';\n`;\n\nexport const ProgressItem = styled.div<{ active: boolean }>`\n  background: ${(props) =>\n    props.active\n      ? 'radial-gradient(circle, rgba(152,152,152,1) 1%, rgba(0,0,0,1) 79%)'\n      : 'radial-gradient(circle, rgba(9, 189, 45, 1) 1%, rgba(0, 0, 0, 1) 70%)'};\n  width: 35px;\n  height: 35px;\n  border-radius: 50%;\n`;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectTotalRounds } from 'slices/gameSlice';\nimport { ProgressGrid, ProgressItem } from './ProgressBar.styles';\n\ninterface IProps {\n  readonly currentRound: number;\n}\n\nconst ProgressBar: React.FC<IProps> = ({ currentRound }) => {\n  const totalRounds = useSelector(selectTotalRounds);\n\n  return (\n    <ProgressGrid>\n      {[...Array(totalRounds)].map((x, i) => (\n        <ProgressItem active={currentRound < i + 1} key={i} />\n      ))}\n    </ProgressGrid>\n  );\n};\n\nexport default ProgressBar;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectCurrentRound,\n  selectRandomArray,\n  selectUserArray,\n  setTurn,\n  userClick,\n  success,\n  fail,\n  selectIsUserTurn,\n} from 'slices/gameSlice';\nimport { compareArray } from 'helpers/compareArray';\n\nconst useKeyboard = () => {\n  const dispatch = useDispatch();\n  const userArray = useSelector(selectUserArray);\n  const randomArray = useSelector(selectRandomArray);\n  const isUserTurn = useSelector(selectIsUserTurn);\n  const currentRound = useSelector(selectCurrentRound);\n\n  useEffect(() => {\n    const isValid = compareArray(userArray, randomArray);\n    isValid || dispatch(fail());\n\n    dispatch(setTurn(true));\n\n    if (userArray.length < currentRound) return;\n    isValid && dispatch(success());\n  }, [userArray]);\n\n  const handleClick = (i: number, e: unknown) => {\n    dispatch(userClick(i));\n    dispatch(setTurn(false));\n  };\n\n  return { currentRound, isUserTurn, handleClick };\n};\n\nexport default useKeyboard;\n","export const compareArray = (userArr: number[], randArr: number[]) =>\n  userArr.every((item, index) => {\n    return randArr[index] === userArr[index];\n  });\n","import React from 'react';\nimport { BoxContainer, KeyboardGrid, KeyboardItem } from './Box.styles';\nimport ProgressBar from '../ProgressBar/ProgressBar';\nimport useKeyboard from 'hooks/useKeyboard';\n\nconst Keyboard: React.FC = () => {\n  const { currentRound, isUserTurn, handleClick } = useKeyboard();\n\n  return (\n    <BoxContainer>\n      <ProgressBar currentRound={currentRound - 1}></ProgressBar>\n      <KeyboardGrid active={isUserTurn}>\n        {[...Array(16)].map((x, i) => (\n          <KeyboardItem onClick={(e) => handleClick(i, e)} key={'screenItem' + i} />\n        ))}\n      </KeyboardGrid>\n    </BoxContainer>\n  );\n};\n\nexport default Keyboard;\n","import { useRef, useLayoutEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectCurrentRound, selectRandomArray, setTurn } from 'slices/gameSlice';\nimport { delay } from 'lodash';\nimport { isUserTurn, hideItem, showItem } from 'helpers/animeScreen';\n\nconst useAnimeScreen = () => {\n  const dispatch = useDispatch();\n  const screenRef = useRef<HTMLDivElement | null>(null);\n  const randomArray = useSelector(selectRandomArray);\n  const currentRound = useSelector(selectCurrentRound);\n\n  useLayoutEffect(() => {\n    if (screenRef.current === null) return;\n\n    randomArray.every((item, index) => {\n      //@ts-ignore\n      const currItem: HTMLDivElement = screenRef.current.children[item];\n      const delayTime = (index + 1) * 800;\n      const hideTime = delayTime + 500;\n      if (isUserTurn(currentRound, index)) {\n        delay(() => dispatch(setTurn(true)), delayTime);\n        return false;\n      }\n\n      delay(() => showItem(currItem), delayTime);\n      delay(() => hideItem(currItem), hideTime);\n      return true;\n    });\n  }, [currentRound]);\n\n  return { currentRound, screenRef };\n};\n\nexport default useAnimeScreen;\n","export const isUserTurn = (currRound: number, currKey: number): boolean => {\n  return !(currKey < currRound);\n};\n\nexport const hideItem = (element: HTMLDivElement): void => {\n  element.removeAttribute('style');\n};\n\nexport const showItem = (element: HTMLDivElement): void => {\n  element.style.background = 'blue';\n};\n","import React from 'react';\nimport { BoxContainer, ScreenGrid, ScreenItem } from './Box.styles';\nimport ProgressBar from '../ProgressBar/ProgressBar';\nimport useAnimeScreen from 'hooks/useAnimeScreen';\n\nconst Screen: React.FC = () => {\n  const { currentRound, screenRef } = useAnimeScreen();\n\n  return (\n    <BoxContainer>\n      <ProgressBar currentRound={currentRound} />\n      <ScreenGrid ref={screenRef}>\n        {[...Array(16)].map((x, i) => (\n          <ScreenItem key={'screenItem' + i} active={true} />\n        ))}\n      </ScreenGrid>\n    </BoxContainer>\n  );\n};\n\nexport default Screen;\n","import React from 'react';\nimport { WinnerWrapper, WinnerHeader } from './Box.styles';\n\nconst Screen: React.FC = () => {\n  return (\n    <WinnerWrapper>\n      <WinnerHeader>You won!</WinnerHeader>\n    </WinnerWrapper>\n  );\n};\n\nexport default Screen;\n","import { useSelector } from 'react-redux';\nimport { selectCurrentRound, selectTotalRounds } from 'slices/gameSlice';\n\nconst useWin = () => {\n  const totalRounds = useSelector(selectTotalRounds);\n  const currentRound = useSelector(selectCurrentRound);\n  const isWin = currentRound > totalRounds;\n\n  return { isWin };\n};\n\nexport default useWin;\n","import React from 'react';\n\nimport ResetButton from './ResetButton/ResetButton';\nimport { Container, Wrapper } from './GameBoard.styles';\nimport { Screen, Keyboard, Winner } from './Box';\nimport useWin from 'hooks/useWin';\n\nconst Gameboard: React.FC = () => {\n  const { isWin } = useWin();\n  return (\n    <Container>\n      <ResetButton />\n      <Wrapper>\n        {isWin ? (\n          <Winner />\n        ) : (\n          <>\n            <Screen />\n            <Keyboard />\n          </>\n        )}\n      </Wrapper>\n    </Container>\n  );\n};\n\nexport default Gameboard;\n","import React, { lazy, Suspense } from 'react';\nimport { useSelector } from 'react-redux';\nimport Wrapper from 'components/Wrapper/Wrapper';\nimport { selectIsLaunched } from 'slices/gameSlice';\nimport GameBoard from 'components/GameBoard/GameBoard';\n\nconst Menu = lazy(() => import('components/Menu/Menu'));\n\nconst Game: React.FC = () => {\n  const isLaunched = useSelector(selectIsLaunched);\n  return (\n    <Wrapper>\n      <Suspense fallback={<h1>Game loading ... </h1>}>\n        {isLaunched ? <GameBoard /> : <Menu />}\n      </Suspense>\n    </Wrapper>\n  );\n};\n\nexport default Game;\n","export default __webpack_public_path__ + \"static/media/background.bbbd1b44.png\";","import { createGlobalStyle } from 'styled-components';\nimport background from '../images/background.png';\n\nconst GlobalStyle = createGlobalStyle`  \n  *, *::before, *::after {\n    box-sizing: border-box;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n  \n  html {\n    font-size: 62.5%; \n  }\n  \n  body {\n    overflow-x: hidden;\n    font-size: 1.6rem;\n    font-family: 'Amatic SC', cursive, sans-serif;\n    color: #fff;\n    background: #000;\n    background-image: url(${background});\n    background-size: contain;\n    padding: env(safe-area-inset-top) env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left);\n  }\n\n  body::-webkit-scrollbar {\n    width: 0.5em;\n  }\n\n  body::-webkit-scrollbar-track {\n    box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.2);\n  }\n\n  body::-webkit-scrollbar-thumb {\n    border-radius: 100px;\n    background-color: darkgrey;\n    outline: 1px solid slategrey;\n  }\n  button {\n    outline: none!important;\n  }\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from 'store';\nimport Game from 'pages/Game';\nimport GlobalStyle from 'theme/GlobalStyle';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <Provider store={store}>\n        <Game />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport WebFont from 'webfontloader';\n\nWebFont.load({\n  google: {\n    families: ['Amatic SC:400,700', 'cursive', 'sans-serif'],\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}